# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Merge into Production

on:
  push:
    branches: "production"
    paths:
      - "srcs/**"
  workflow_dispatch:
env:
    ACR_RESOURCE_GROUP: ICAP
    AZURE_CONTAINER_REGISTRY: icapacr
    CLUSTER_NAME: ICAP_AKS
    CLUSTER_RESOURCE_GROUP: ICAP

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      ICAP_Client: ${{ steps.filter.outputs.ICAP_Client }}
      ICAP_AccountService: ${{ steps.filter.outputs.ICAP_AccountService }}
      ICAP_MarketService: ${{ steps.filter.outputs.ICAP_MarketService }}
      ICAP_RelationService: ${{ steps.filter.outputs.ICAP_RelationService }}
      ICAP_ServiceBus: ${{ steps.filter.outputs.ICAP_ServiceBus }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          ICAP_Client:
            - 'srcs/ICAP_Client/**'
          ICAP_AccountService:
            - 'srcs/ICAP_AccountService/**'
          ICAP_MarketService:
            - 'srcs/ICAP_MarketService/**'
          ICAP_RelationService:
            - 'srcs/ICAP_RelationService/**'
          ICAP_ServiceBus:
            - 'srcs/ICAP_ServiceBus/**'     


  sonar-scan:
    name: Sonarcloud Scan
    needs: filter
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [ICAP_Client, ICAP_AccountService, ICAP_MarketService, ICAP_RelationService]
    steps:
    - uses: actions/checkout@v4
      if: needs.filter.outputs[matrix.services] == 'true'
    - name: Setup .NET
      if: needs.filter.outputs[matrix.services] == 'true'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Build
      if: needs.filter.outputs[matrix.services] == 'true'
      run: |
        cd ./srcs/${{ matrix.services }}
        dotnet build $(ls *.csproj)
    - name: Execute Scans
      if: needs.filter.outputs[matrix.services] == 'true'
      uses: highbyte/sonarscan-dotnet@v2.3.0
      with:
        # The key of the SonarQube project
        sonarProjectKey: FHICT-Owen_ICAP
        # The name of the SonarQube project
        sonarProjectName: ICAP
        # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
        sonarOrganization: fhict-s-owen
        dotnetBuildArguments: ./srcs/${{ matrix.services }}
        dotnetDisableTests: true
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  run-e2e-tests:
    name: Playwright E2E Tests
    needs: filter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Build Test Project
      run: |
        cd ./srcs/ICAP_Playwright.Tests
        dotnet build $(ls *.csproj)
      env:
        ASPNETCORE_ENVIRONMENT: Development
        Username: ${{ secrets.TESTACCOUNT_USERNAME }}
        Password: ${{ secrets.TESTACCOUNT_PASSWORD }}
    - name: Ensure browsers are installed
      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps
    - name: Run Tests
      run: |
        dotnet test $(ls *.csproj)
      env:
        ASPNETCORE_ENVIRONMENT: Development
        Username: ${{ secrets.TESTACCOUNT_USERNAME }}
        Password: ${{ secrets.TESTACCOUNT_PASSWORD }}

  run-integration-tests:
    name: SpecFlow Integration Tests
    needs: filter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Build Test Project
      run: |
        cd ./srcs/ICAP_AccountService.Specs
        dotnet build $(ls *.csproj)
      env:
        ASPNETCORE_ENVIRONMENT: Development
        MongoTestDatabaseName: "ICAP-Test"
        MongoTestConnectionString: ${{ secrets.MONGO_TEST_CONNECTION_STRING }}
        Username: ${{ secrets.TESTACCOUNT_USERNAME }}
        Password: ${{ secrets.TESTACCOUNT_PASSWORD }}
        ClientId: ${{ secrets.ENTRA_CLIENT_ID }}
        TenantId: ${{ secrets.ENTRA_TENANT_ID }}
        Scopes: ${{ secrets.API_SCOPES }}
        AzureServiceBus: ${{ secrets.AZ_SB }}
    - name: Run Tests
      run: |
        cd ./srcs/ICAP_AccountService.Specs
        dotnet test $(ls *.csproj)
      env:
        ASPNETCORE_ENVIRONMENT: Development
        MongoTestDatabaseName: "ICAP-Test"
        MongoTestConnectionString: ${{ secrets.MONGO_TEST_CONNECTION_STRING }}
        Username: ${{ secrets.TESTACCOUNT_USERNAME }}
        Password: ${{ secrets.TESTACCOUNT_PASSWORD }}
        ClientId: ${{ secrets.ENTRA_CLIENT_ID }}
        TenantId: ${{ secrets.ENTRA_TENANT_ID }}
        Scopes: 
          - ${{ secrets.API_SCOPE_1 }}
        AzureServiceBus: ${{ secrets.AZ_SB }}

  run-unit-tests:
    name: XUnit Unit Tests
    needs: filter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Build Test Project
      run: |
        cd ./srcs/ICAP_MarketService.Tests
        dotnet build $(ls *.csproj)
    - name: Run Tests
      run: |
        cd ./srcs/ICAP_MarketService.Tests
        dotnet test $(ls *.csproj)


  build-images:
    name: Build Service Images
    needs: [filter, sonar-scan]
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [ICAP_AccountService, ICAP_MarketService, ICAP_RelationService]
    steps:
      - uses: actions/checkout@v4
        if: needs.filter.outputs[matrix.services] == 'true'
      - uses: azure/login@v1
        if: needs.filter.outputs[matrix.services] == 'true'
        name: Azure login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create ENV for name container image
        run: |
          echo "CONVERTED_IMAGE=$(echo '${{ matrix.services }}' | tr '[:upper:]' '[:lower:]' | tr '_' '-')" >> $GITHUB_ENV
      - name: Build and push image to ACR
        if: needs.filter.outputs[matrix.services] == 'true'
        run: az acr build --image ${{ env.CONVERTED_IMAGE }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.ACR_RESOURCE_GROUP }} -f ./srcs/Dockerfile.${{ matrix.services }} ./srcs/
  
  deploy-client:
    needs: [filter, build-and-test]
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/checkout@v4
      if: needs.filter.outputs.ICAP_Client == 'true'
      with:
        submodules: true
        lfs: false
    - name: Build And Deploy
      if: needs.filter.outputs.ICAP_Client == 'true'
      id: builddeploy
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BLACK_POND_0F8DDE003  }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/srcs/ICAP_Client"
        api_location: ""
        output_location: "wwwroot"


  deploy-services:
    name: Deploy Services To AKS
    needs: [filter, build-images]
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [ICAP_AccountService, ICAP_MarketService, ICAP_RelationService]
    steps:
      - uses: actions/checkout@v4
        if: needs.filter.outputs[matrix.services] == 'true'
      - uses: azure/login@v1
        if: needs.filter.outputs[matrix.services] == 'true'
        name: Azure login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/use-kubelogin@v1
        if: needs.filter.outputs[matrix.services] == 'true'
        name: Set up kubelogin for non-interactive login
        with:
          kubelogin-version: v0.0.25
      - uses: azure/aks-set-context@v3
        if: needs.filter.outputs[matrix.services] == 'true'
        name: Get K8s context
        with:
          admin: "false"
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          use-kubelogin: "true"
      - name: Create ENV for name container image
        run: |
          echo "CONVERTED_IMAGE=$(echo '${{ matrix.services }}' | tr '[:upper:]' '[:lower:]' | tr '_' '-')" >> $GITHUB_ENV
      - uses: Azure/k8s-deploy@v4
        if: needs.filter.outputs[matrix.services] == 'true'
        name: Deploys application
        with:
          action: deploy
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONVERTED_IMAGE }}:${{ github.sha }}
          manifests: |
            ./srcs/${{ matrix.services }}/manifests/deployment.yaml
            ./srcs/${{ matrix.services }}/manifests/service.yaml
            ./srcs/${{ matrix.services }}/manifests/podautoscaler.yaml
            ./srcs/${{ matrix.services }}/manifests/ingress.yaml
            ./srcs/${{ matrix.services }}/manifests/secretprovider.yaml
          namespace: default

  stackhawk-hawkscan-services:
    name: Post-deploy Security Scan
    needs: [deploy-services]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: stackhawk/hawkscan-action@v2.1.2
      with:
        apiKey: ${{ secrets.HAWK_API_KEY }}
        configurationFiles: stackhawk-accounts.yml stackhawk-market.yml stackhawk-relations.yml
