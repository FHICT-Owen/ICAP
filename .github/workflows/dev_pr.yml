# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Pull Request DEV

on:
  pull_request:
    branches: ["production"]
    paths:
      - "srcs/**"
      - ".github/workflows/**"
  workflow_dispatch:
env:
    ACR_RESOURCE_GROUP: ICAP
    AZURE_CONTAINER_REGISTRY: icapacr
    CLUSTER_NAME: ICAP_AKS
    CLUSTER_RESOURCE_GROUP: ICAP
    AZURE_WEBAPP_NAME: ICAPClient20240116120037
    AZURE_WEBAPP_PACKAGE_PATH: ICAP_Client\published
    CONFIGURATION: Release
    DOTNET_CORE_VERSION: 8.0.x
    CLIENT_WORKING_DIRECTORY: /srcs/ICAP_Client

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      ICAP_Client: ${{ steps.filter.outputs.ICAP_Client }}
      ICAP_AccountService: ${{ steps.filter.outputs.ICAP_AccountService }}
      ICAP_MarketService: ${{ steps.filter.outputs.ICAP_MarketService }}
      ICAP_RelationService: ${{ steps.filter.outputs.ICAP_RelationService }}
      ICAP_ServiceBus: ${{ steps.filter.outputs.ICAP_ServiceBus }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          ICAP_Client:
            - 'srcs/ICAP_Client/**'
          ICAP_AccountService:
            - 'srcs/ICAP_AccountService/**'
          ICAP_MarketService:
            - 'srcs/ICAP_MarketService/**'
          ICAP_RelationService:
            - 'srcs/ICAP_RelationService/**'
          ICAP_ServiceBus:
            - 'srcs/ICAP_ServiceBus/**'     

  test-projects:
    needs: filter
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [ICAP_Client, ICAP_AccountService, ICAP_MarketService, ICAP_RelationService]
    steps:
    - uses: actions/checkout@v4
      if: needs.filter.outputs[matrix.services] == 'true'
    - name: Setup .NET Core
      if: needs.filter.outputs[matrix.services] == 'true'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Build
      if: needs.filter.outputs[matrix.services] == 'true'
      run: |
        cd ./srcs/${{ matrix.services }}
        dotnet build $(ls *.csproj)

    - name: SpecFlow Tests
      if: needs.filter.outputs[matrix.services] == 'true'
      run: |
        cd ./srcs/${{ matrix.services }}.Specs
        dotnet test --no-build $(ls *.csproj)

    - name: SonarCloud Scan
      if: needs.filter.outputs[matrix.services] == 'true'
      uses: highbyte/sonarscan-dotnet@v2.3.0
      with:
        # The key of the SonarQube project
        sonarProjectKey: FHICT-Owen_ICAP
        # The name of the SonarQube project
        sonarProjectName: ICAP
        # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
        sonarOrganization: fhict-s-owen
        dotnetBuildArguments: ./srcs/${{ matrix.services }}
        dotnetDisableTests: true
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-images:
    needs: [filter, test-projects]
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [ICAP_AccountService, ICAP_MarketService, ICAP_RelationService]
    steps:
      - uses: actions/checkout@v4
        if: needs.filter.outputs[matrix.services] == 'true'
      - uses: azure/login@v1
        if: needs.filter.outputs[matrix.services] == 'true'
        name: Azure login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create ENV for name container image
        run: |
          echo "CONVERTED_IMAGE=$(echo '${{ matrix.services }}' | tr '[:upper:]' '[:lower:]' | tr '_' '-')" >> $GITHUB_ENV
      - name: Build and push image to ACR
        if: needs.filter.outputs[matrix.services] == 'true'
        run: az acr build --image ${{ env.CONVERTED_IMAGE }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.ACR_RESOURCE_GROUP }} -f ./srcs/Dockerfile.${{ matrix.services }} ./srcs/
  
  build-client:
    runs-on: windows-latest
    needs: [filter, test-projects]
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      if: needs.filter.outputs.ICAP_Client == 'true'
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - name: Restore
      if: needs.filter.outputs.ICAP_Client == 'true'
      run: dotnet restore "${{ env.CLIENT_WORKING_DIRECTORY }}"
    - name: Build
      if: needs.filter.outputs.ICAP_Client == 'true'
      run: dotnet build "${{ env.CLIENT_WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore
    - name: Test
      if: needs.filter.outputs.ICAP_Client == 'true'
      run: dotnet test "${{ env.CLIENT_WORKING_DIRECTORY }}" --no-build
    - name: Publish
      if: needs.filter.outputs.ICAP_Client == 'true'
      run: dotnet publish "${{ env.CLIENT_WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"
    - name: Publish Artifacts
      if: needs.filter.outputs.ICAP_Client == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ICAP-Client
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  deploy-client:
    needs: [filter, build-client]
    runs-on: windows-latest
    steps:
    - name: Download artifact from build job
      if: needs.filter.outputs.ICAP_Client == 'true'
      uses: actions/download-artifact@v3
      with:
        name: ICAP-Client
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    - name: Deploy to Azure WebApp
      if: needs.filter.outputs.ICAP_Client == 'true'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.ICAPClient20240116120037_5205 }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  deploy-services: 
    needs: [filter, build-images]
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [ICAP_AccountService, ICAP_MarketService, ICAP_RelationService]
    steps:
      - uses: actions/checkout@v4
        if: needs.filter.outputs[matrix.services] == 'true'
      - uses: azure/login@v1
        if: needs.filter.outputs[matrix.services] == 'true'
        name: Azure login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/use-kubelogin@v1
        if: needs.filter.outputs[matrix.services] == 'true'
        name: Set up kubelogin for non-interactive login
        with:
          kubelogin-version: v0.0.25
      - uses: azure/aks-set-context@v3
        if: needs.filter.outputs[matrix.services] == 'true'
        name: Get K8s context
        with:
          admin: "false"
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          use-kubelogin: "true"
      - name: Create ENV for name container image
        run: |
          echo "CONVERTED_IMAGE=$(echo '${{ matrix.services }}' | tr '[:upper:]' '[:lower:]' | tr '_' '-')" >> $GITHUB_ENV
      - uses: Azure/k8s-deploy@v4
        if: needs.filter.outputs[matrix.services] == 'true'
        name: Deploys application
        with:
          action: deploy
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONVERTED_IMAGE }}:${{ github.sha }}
          manifests: |
            ./srcs/${{ matrix.services }}/manifests/deployment.yaml
            ./srcs/${{ matrix.services }}/manifests/service.yaml
            ./srcs/${{ matrix.services }}/manifests/podautoscaler.yaml
            ./srcs/${{ matrix.services }}/manifests/ingress.yaml
            ./srcs/${{ matrix.services }}/manifests/secretprovider.yaml
          namespace: default
