@page "/User"
@attribute [Authorize]
@using System.Text.Json
@using System.Security.Claims
@using ICAP_Client.RESTClients
@inject IAccessTokenProvider AuthorizationService
@inject AccountServiceClient AccountServiceClient
@inject NavigationManager Navmanager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<h1>@AuthenticatedUser?.Identity?.Name</h1>

<h3>Would you like to remove your account and all accompanying data?</h3>
<MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="DeleteData">Delete</MudButton>

<h2>Claims</h2>

@foreach (var claim in AuthenticatedUser?.Claims ?? Array.Empty<Claim>())
{
    <p class="claim">@(claim.Type): @claim.Value</p>
}

<h2>Access token</h2>

<p id="access-token">@AccessToken?.Value</p>

<h2>Access token claims</h2>

@foreach (var claim in GetAccessTokenClaims())
{
    <p>@(claim.Key): @claim.Value.ToString()</p>
}

@if (AccessToken != null)
{
    <h2>Access token expires</h2>

    <p>Current time: <span id="current-time">@DateTimeOffset.Now</span></p>
    <p id="access-token-expires">@AccessToken.Expires</p>

    <h2>Access token granted scopes (as reported by the API)</h2>

    @foreach (var scope in AccessToken.GrantedScopes)
    {
        <p>Scope: @scope</p>
    }
}

@code {

    public ClaimsPrincipal AuthenticatedUser { get; set; }
    public AccessToken? AccessToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var accessTokenResult = await AuthorizationService.RequestAccessToken();

        if (!accessTokenResult.TryGetToken(out var token))
        {
            throw new InvalidOperationException(
                "Failed to provision the access token.");
        }

        AccessToken = token;

        AuthenticatedUser = state.User;
    }

    protected IDictionary<string, object>? GetAccessTokenClaims()
    {
        if (AccessToken == null)
        {
            return new Dictionary<string, object>();
        }

        // header.payload.signature
        var payload = AccessToken.Value.Split(".")[1];
        var base64Payload = payload.Replace('-', '+').Replace('_', '/')
            .PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');

        return JsonSerializer.Deserialize<IDictionary<string, object>>(
            Convert.FromBase64String(base64Payload));
    }

    private async Task DeleteData()
    {
        if (AccessToken == null)
        {
            Snackbar.Add("Unable to delete data, access token is not set!", Severity.Error);
            return;
        }
        var result = await AccountServiceClient.RemoveUserDataAsync();
        if (result)
        {
            Snackbar.Add("Removed user data successfully! You will be logged out momentarily.", Severity.Success);
            await Task.Delay(5000);
            Navmanager.NavigateToLogout("/authentication/logout", "/");
        }
        else Snackbar.Add("Unable to delete data, account service returned an error", Severity.Error);
    }
}