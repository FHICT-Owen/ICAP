@using ICAP_Client.RESTClients
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IAccessTokenProvider AuthorizationService
@inject AccountServiceClient AccountServiceClient

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Dark">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <a href="User">
                    <MudText Class="px-4 d-none d-sm-flex" Typo="Typo.body1" Style="color:white">Welcome, @context.User.Identity?.Name</MudText>
                </a>
                <MudButton OnClick="LogOut" Variant="Variant.Filled" Color="Color.Error">Log Out</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton OnClick="LogIn" Variant="Variant.Filled" Color="Color.Success">Log In</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">ICAP_Client</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-2 pt-2">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    void LogOut() => Navigation.NavigateToLogout("/authentication/logout", "/");
    void LogIn() => Navigation.NavigateToLogin("/authentication/login");

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


    protected override async Task OnInitializedAsync()
    {
        bool tokenAcquired = false;
        while (!tokenAcquired)
        {
            var tokenResult = await AuthorizationService.RequestAccessToken();
            if (tokenResult.Status == AccessTokenResultStatus.Success &&
            tokenResult.TryGetToken(out var token))
            {
                await AccountServiceClient.SendTokenAsync(token.Value);
                tokenAcquired = true;
            }
            else await Task.Delay(10000);
            Console.WriteLine(tokenAcquired);
        }        
    }
}